

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Oct 06 17:28:59 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F627A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F627A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001F                     	;# 
    80  0081                     	;# 
    81  0085                     	;# 
    82  0086                     	;# 
    83  008C                     	;# 
    84  008E                     	;# 
    85  0092                     	;# 
    86  0098                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009F                     	;# 
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0092                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009F                     	;# 
   130                           
   131                           	psect	idataCOMMON
   132  00ED                     __pidataCOMMON:
   133                           
   134                           ;initializer for _fog_prime_ms
   135  00ED  34E8               	retlw	232
   136  00EE  3403               	retlw	3
   137                           
   138                           	psect	idataBANK0
   139  00C8                     __pidataBANK0:
   140                           
   141                           ;initializer for _sequence
   142  00C8  3401               	retlw	1
   143  00C9  3400               	retlw	0
   144  00CA  3401               	retlw	1
   145  00CB  3400               	retlw	0
   146  00CC  3402               	retlw	2
   147  00CD  3400               	retlw	0
   148  00CE  3403               	retlw	3
   149  00CF  3400               	retlw	0
   150  00D0  3401               	retlw	1
   151  00D1  3400               	retlw	0
   152  00D2  3406               	retlw	6
   153  00D3  3400               	retlw	0
   154                           
   155                           ;initializer for _state
   156  00D4  3401               	retlw	1
   157  0006                     _PORTB	set	6
   158  0005                     _PORTA	set	5
   159  001F                     _CMCON	set	31
   160  0006                     _PORTBbits	set	6
   161  000B                     _INTCONbits	set	11
   162  0081                     _OPTION_REGbits	set	129
   163  0086                     _TRISB	set	134
   164  0085                     _TRISA	set	133
   165                           
   166                           	psect	cinit
   167  000B                     start_initialization:	
   168                           ; #config settings
   169                           
   170  000B                     __initialization:
   171                           
   172                           ; Initialize objects allocated to BANK0
   173  000B  20C8               	fcall	__pidataBANK0	;fetch initializer
   174  000C  00A0               	movwf	__pdataBANK0& (0+127)
   175  000D  20C9               	fcall	__pidataBANK0+1	;fetch initializer
   176  000E  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   177  000F  20CA               	fcall	__pidataBANK0+2	;fetch initializer
   178  0010  00A2               	movwf	(__pdataBANK0+2)& (0+127)
   179  0011  20CB               	fcall	__pidataBANK0+3	;fetch initializer
   180  0012  00A3               	movwf	(__pdataBANK0+3)& (0+127)
   181  0013  20CC               	fcall	__pidataBANK0+4	;fetch initializer
   182  0014  00A4               	movwf	(__pdataBANK0+4)& (0+127)
   183  0015  20CD               	fcall	__pidataBANK0+5	;fetch initializer
   184  0016  00A5               	movwf	(__pdataBANK0+5)& (0+127)
   185  0017  20CE               	fcall	__pidataBANK0+6	;fetch initializer
   186  0018  00A6               	movwf	(__pdataBANK0+6)& (0+127)
   187  0019  20CF               	fcall	__pidataBANK0+7	;fetch initializer
   188  001A  00A7               	movwf	(__pdataBANK0+7)& (0+127)
   189  001B  20D0               	fcall	__pidataBANK0+8	;fetch initializer
   190  001C  00A8               	movwf	(__pdataBANK0+8)& (0+127)
   191  001D  20D1               	fcall	__pidataBANK0+9	;fetch initializer
   192  001E  00A9               	movwf	(__pdataBANK0+9)& (0+127)
   193  001F  20D2               	fcall	__pidataBANK0+10	;fetch initializer
   194  0020  00AA               	movwf	(__pdataBANK0+10)& (0+127)
   195  0021  20D3               	fcall	__pidataBANK0+11	;fetch initializer
   196  0022  00AB               	movwf	(__pdataBANK0+11)& (0+127)
   197  0023  20D4               	fcall	__pidataBANK0+12	;fetch initializer
   198  0024  00AC               	movwf	(__pdataBANK0+12)& (0+127)
   199                           
   200                           ; Initialize objects allocated to COMMON
   201  0025  20ED               	fcall	__pidataCOMMON	;fetch initializer
   202  0026  00F8               	movwf	__pdataCOMMON& (0+127)
   203  0027  20EE               	fcall	__pidataCOMMON+1	;fetch initializer
   204  0028  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   205                           
   206                           ; Clear objects allocated to BANK0
   207  0029  01B2               	clrf	__pbssBANK0& (0+127)
   208  002A  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   209  002B  01B4               	clrf	(__pbssBANK0+2)& (0+127)
   210  002C  01B5               	clrf	(__pbssBANK0+3)& (0+127)
   211                           
   212                           ; Clear objects allocated to COMMON
   213  002D  01F6               	clrf	__pbssCOMMON& (0+127)
   214  002E  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   215  002F                     end_of_initialization:	
   216                           ;End of C runtime variable initialization code
   217                           
   218  002F                     __end_of__initialization:
   219  002F  0183               	clrf	3
   220  0030  2831               	ljmp	_main	;jump to C main() function
   221                           
   222                           	psect	bssCOMMON
   223  0076                     __pbssCOMMON:
   224  0076                     _length:
   225  0076                     	ds	2
   226                           
   227                           	psect	dataCOMMON
   228  0078                     __pdataCOMMON:
   229  0078                     _fog_prime_ms:
   230  0078                     	ds	2
   231                           
   232                           	psect	bssBANK0
   233  0032                     __pbssBANK0:
   234  0032                     _sequence_count:
   235  0032                     	ds	2
   236  0034                     _loop_count:
   237  0034                     	ds	2
   238                           
   239                           	psect	dataBANK0
   240  0020                     __pdataBANK0:
   241  0020                     _sequence:
   242  0020                     	ds	12
   243  002C                     _state:
   244  002C                     	ds	1
   245                           
   246                           	psect	cstackCOMMON
   247  0070                     __pcstackCOMMON:
   248  0070                     ?_switch_state:
   249  0070                     ?_interrupt_handler:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_initialize_hw:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_main:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?i1_switch_state:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ??i1_switch_state:	
   262                           ; 1 bytes @ 0x0
   263                           
   264                           
   265                           ; 1 bytes @ 0x0
   266  0070                     	ds	1
   267  0071                     i1switch_state@new_state:
   268                           
   269                           ; 1 bytes @ 0x1
   270  0071                     	ds	1
   271  0072                     ??_interrupt_handler:
   272                           
   273                           ; 1 bytes @ 0x2
   274  0072                     	ds	2
   275  0074                     ??_switch_state:
   276  0074                     ??_initialize_hw:	
   277                           ; 1 bytes @ 0x4
   278                           
   279                           
   280                           ; 1 bytes @ 0x4
   281  0074                     	ds	1
   282  0075                     switch_state@new_state:
   283                           
   284                           ; 1 bytes @ 0x5
   285  0075                     	ds	1
   286                           
   287                           	psect	cstackBANK0
   288  002D                     __pcstackBANK0:
   289  002D                     ??_main:
   290                           
   291                           ; 1 bytes @ 0x0
   292  002D                     	ds	3
   293  0030                     main@sequence_length:
   294                           
   295                           ; 2 bytes @ 0x3
   296  0030                     	ds	2
   297                           
   298                           	psect	maintext
   299  0031                     __pmaintext:	
   300 ;;
   301 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   302 ;;
   303 ;; *************** function _main *****************
   304 ;; Defined at:
   305 ;;		line 83 in file "main.c"
   306 ;; Parameters:    Size  Location     Type
   307 ;;		None
   308 ;; Auto vars:     Size  Location     Type
   309 ;;  sequence_len    2    3[BANK0 ] int 
   310 ;; Return value:  Size  Location     Type
   311 ;;                  1    wreg      void 
   312 ;; Registers used:
   313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : B00/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   319 ;;      Params:         0       0       0       0
   320 ;;      Locals:         0       2       0       0
   321 ;;      Temps:          0       3       0       0
   322 ;;      Totals:         0       5       0       0
   323 ;;Total ram usage:        5 bytes
   324 ;; Hardware stack levels required when called:    3
   325 ;; This function calls:
   326 ;;		_initialize_hw
   327 ;;		_switch_state
   328 ;; This function is called by:
   329 ;;		Startup code after reset
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333                           
   334                           ;psect for function _main
   335  0031                     _main:
   336  0031                     l833:	
   337                           ;incstack = 0
   338                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   339                           
   340                           
   341                           ;main.c: 84:     initialize_hw();
   342  0031  20B2               	fcall	_initialize_hw
   343  0032                     l835:
   344                           
   345                           ;main.c: 85:     int sequence_length = ( sizeof( sequence ) / sizeof( sequence[0] ) );
   346  0032  3003               	movlw	3
   347  0033  1283               	bcf	3,5	;RP0=0, select bank0
   348  0034  1303               	bcf	3,6	;RP1=0, select bank0
   349  0035  00B0               	movwf	main@sequence_length
   350  0036  3000               	movlw	0
   351  0037  00B1               	movwf	main@sequence_length+1
   352  0038  287F               	goto	l853
   353  0039                     l837:
   354                           
   355                           ;main.c: 96:                 if (loop_count >= sequence[sequence_count][0]) {
   356  0039  0832               	movf	_sequence_count,w
   357  003A  00AD               	movwf	??_main
   358  003B  3001               	movlw	1
   359  003C                     u175:
   360  003C  1003               	clrc
   361  003D  0DAD               	rlf	??_main,f
   362  003E  3EFF               	addlw	-1
   363  003F  1D03               	skipz
   364  0040  283C               	goto	u175
   365  0041  1003               	clrc
   366  0042  0D2D               	rlf	??_main,w
   367  0043  3E20               	addlw	(low (_sequence| 0))& (0+255)
   368  0044  0084               	movwf	4
   369  0045  1383               	bcf	3,7	;select IRP bank0
   370  0046  0800               	movf	0,w
   371  0047  00AE               	movwf	??_main+1
   372  0048  0A84               	incf	4,f
   373  0049  0800               	movf	0,w
   374  004A  00AF               	movwf	??_main+2
   375  004B  082F               	movf	??_main+2,w
   376  004C  0235               	subwf	_loop_count+1,w
   377  004D  1D03               	skipz
   378  004E  2851               	goto	u185
   379  004F  082E               	movf	??_main+1,w
   380  0050  0234               	subwf	_loop_count,w
   381  0051                     u185:
   382  0051  1C03               	skipc
   383  0052  2854               	goto	u181
   384  0053  2855               	goto	u180
   385  0054                     u181:
   386  0054  285D               	goto	l843
   387  0055                     u180:
   388  0055                     l839:
   389                           
   390                           ;main.c: 97:                     sequence_count++;
   391  0055  3001               	movlw	1
   392  0056  07B2               	addwf	_sequence_count,f
   393  0057  1803               	skipnc
   394  0058  0AB3               	incf	_sequence_count+1,f
   395  0059  3000               	movlw	0
   396  005A  07B3               	addwf	_sequence_count+1,f
   397  005B                     l841:
   398                           
   399                           ;main.c: 98:                     loop_count = 0;
   400  005B  01B4               	clrf	_loop_count
   401  005C  01B5               	clrf	_loop_count+1
   402  005D                     l843:
   403                           
   404                           ;main.c: 103:                 if (sequence_count >= sequence_length) {
   405  005D  0831               	movf	main@sequence_length+1,w
   406  005E  0233               	subwf	_sequence_count+1,w
   407  005F  1D03               	skipz
   408  0060  2863               	goto	u195
   409  0061  0830               	movf	main@sequence_length,w
   410  0062  0232               	subwf	_sequence_count,w
   411  0063                     u195:
   412  0063  1C03               	skipc
   413  0064  2866               	goto	u191
   414  0065  2867               	goto	u190
   415  0066                     u191:
   416  0066  286A               	goto	l847
   417  0067                     u190:
   418  0067                     l845:
   419                           
   420                           ;main.c: 104:                     switch_state(IDLE);
   421  0067  3000               	movlw	0
   422  0068  20D5               	fcall	_switch_state
   423                           
   424                           ;main.c: 108:                 } else if (!loop_count) {
   425  0069  288F               	goto	l855
   426  006A                     l847:
   427  006A  0834               	movf	_loop_count,w
   428  006B  0435               	iorwf	_loop_count+1,w
   429  006C  1D03               	btfss	3,2
   430  006D  286F               	goto	u201
   431  006E  2870               	goto	u200
   432  006F                     u201:
   433  006F  288F               	goto	l855
   434  0070                     u200:
   435  0070                     l849:
   436                           
   437                           ;main.c: 109:                     PORTA = sequence[sequence_count][1];
   438  0070  0832               	movf	_sequence_count,w
   439  0071  00AD               	movwf	??_main
   440  0072  3001               	movlw	1
   441  0073                     u215:
   442  0073  1003               	clrc
   443  0074  0DAD               	rlf	??_main,f
   444  0075  3EFF               	addlw	-1
   445  0076  1D03               	skipz
   446  0077  2873               	goto	u215
   447  0078  1003               	clrc
   448  0079  0D2D               	rlf	??_main,w
   449  007A  3E22               	addlw	(low ((_sequence| 0+2)))& (0+255)
   450  007B  0084               	movwf	4
   451  007C  0800               	movf	0,w
   452  007D  0085               	movwf	5	;volatile
   453  007E  288F               	goto	l855
   454  007F                     l853:
   455  007F  082C               	movf	_state,w
   456  0080  00AD               	movwf	??_main
   457  0081  01AE               	clrf	??_main+1
   458                           
   459                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   460                           ; Switch size 1, requested type "simple"
   461                           ; Number of cases is 1, Range of values is 0 to 0
   462                           ; switch strategies available:
   463                           ; Name         Instructions Cycles
   464                           ; simple_byte            4     3 (average)
   465                           ; direct_byte            7     6 (fixed)
   466                           ; jumptable            260     6 (fixed)
   467                           ;	Chosen strategy is simple_byte
   468  0082  082E               	movf	??_main+1,w
   469  0083  3A00               	xorlw	0	; case 0
   470  0084  1903               	skipnz
   471  0085  2887               	goto	l881
   472  0086  288F               	goto	l855
   473  0087                     l881:
   474                           
   475                           ; Switch size 1, requested type "simple"
   476                           ; Number of cases is 2, Range of values is 0 to 1
   477                           ; switch strategies available:
   478                           ; Name         Instructions Cycles
   479                           ; simple_byte            7     4 (average)
   480                           ; direct_byte            8     6 (fixed)
   481                           ; jumptable            260     6 (fixed)
   482                           ;	Chosen strategy is simple_byte
   483  0087  082D               	movf	??_main,w
   484  0088  3A00               	xorlw	0	; case 0
   485  0089  1903               	skipnz
   486  008A  288F               	goto	l855
   487  008B  3A01               	xorlw	1	; case 1
   488  008C  1903               	skipnz
   489  008D  2839               	goto	l837
   490  008E  288F               	goto	l855
   491  008F                     l855:
   492                           
   493                           ;main.c: 117:         loop_count++;
   494  008F  3001               	movlw	1
   495  0090  1283               	bcf	3,5	;RP0=0, select bank0
   496  0091  1303               	bcf	3,6	;RP1=0, select bank0
   497  0092  07B4               	addwf	_loop_count,f
   498  0093  1803               	skipnc
   499  0094  0AB5               	incf	_loop_count+1,f
   500  0095  3000               	movlw	0
   501  0096  07B5               	addwf	_loop_count+1,f
   502  0097  287F               	goto	l853
   503  0098  280A               	ljmp	start
   504  0099                     __end_of_main:
   505                           
   506                           	psect	text1
   507  00D5                     __ptext1:	
   508 ;; *************** function _switch_state *****************
   509 ;; Defined at:
   510 ;;		line 46 in file "main.c"
   511 ;; Parameters:    Size  Location     Type
   512 ;;  new_state       1    wreg     unsigned char 
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  new_state       1    5[COMMON] unsigned char 
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg, status,2
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   524 ;;      Params:         0       0       0       0
   525 ;;      Locals:         1       0       0       0
   526 ;;      Temps:          1       0       0       0
   527 ;;      Totals:         2       0       0       0
   528 ;;Total ram usage:        2 bytes
   529 ;; Hardware stack levels used:    1
   530 ;; Hardware stack levels required when called:    2
   531 ;; This function calls:
   532 ;;		Nothing
   533 ;; This function is called by:
   534 ;;		_main
   535 ;; This function uses a non-reentrant model
   536 ;;
   537                           
   538                           
   539                           ;psect for function _switch_state
   540  00D5                     _switch_state:
   541                           
   542                           ;incstack = 0
   543                           ; Regs used in _switch_state: [wreg+status,2]
   544                           ;switch_state@new_state stored from wreg
   545  00D5  00F5               	movwf	switch_state@new_state
   546  00D6                     l741:
   547                           
   548                           ;main.c: 47:     state = new_state;
   549  00D6  0875               	movf	switch_state@new_state,w
   550  00D7  00F4               	movwf	??_switch_state
   551  00D8  0874               	movf	??_switch_state,w
   552  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   553  00DA  1303               	bcf	3,6	;RP1=0, select bank0
   554  00DB  00AC               	movwf	_state
   555  00DC                     l743:
   556                           
   557                           ;main.c: 48:     loop_count = 0;
   558  00DC  01B4               	clrf	_loop_count
   559  00DD  01B5               	clrf	_loop_count+1
   560  00DE                     l745:
   561                           
   562                           ;main.c: 49:     sequence_count = 0;
   563  00DE  01B2               	clrf	_sequence_count
   564  00DF  01B3               	clrf	_sequence_count+1
   565  00E0                     l31:
   566  00E0  0008               	return
   567  00E1                     __end_of_switch_state:
   568                           
   569                           	psect	text2
   570  00B2                     __ptext2:	
   571 ;; *************** function _initialize_hw *****************
   572 ;; Defined at:
   573 ;;		line 63 in file "main.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;		None
   576 ;; Auto vars:     Size  Location     Type
   577 ;;		None
   578 ;; Return value:  Size  Location     Type
   579 ;;                  1    wreg      void 
   580 ;; Registers used:
   581 ;;		wreg, status,2
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   587 ;;      Params:         0       0       0       0
   588 ;;      Locals:         0       0       0       0
   589 ;;      Temps:          0       0       0       0
   590 ;;      Totals:         0       0       0       0
   591 ;;Total ram usage:        0 bytes
   592 ;; Hardware stack levels used:    1
   593 ;; Hardware stack levels required when called:    2
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		_main
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           
   602                           ;psect for function _initialize_hw
   603  00B2                     _initialize_hw:
   604  00B2                     l747:	
   605                           ;incstack = 0
   606                           ; Regs used in _initialize_hw: [wreg+status,2]
   607                           
   608                           
   609                           ;main.c: 64:     CMCON = 0x07;
   610  00B2  3007               	movlw	7
   611  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   612  00B4  1303               	bcf	3,6	;RP1=0, select bank0
   613  00B5  009F               	movwf	31	;volatile
   614  00B6                     l749:
   615                           
   616                           ;main.c: 67:     PORTA = 0x00;
   617  00B6  0185               	clrf	5	;volatile
   618  00B7                     l751:
   619                           
   620                           ;main.c: 68:     TRISA = 0x00;
   621  00B7  1683               	bsf	3,5	;RP0=1, select bank1
   622  00B8  1303               	bcf	3,6	;RP1=0, select bank1
   623  00B9  0185               	clrf	5	;volatile
   624  00BA                     l753:
   625                           
   626                           ;main.c: 71:     PORTB = 0x00;
   627  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   628  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   629  00BC  0186               	clrf	6	;volatile
   630  00BD                     l755:
   631                           
   632                           ;main.c: 72:     TRISB = 0xFF;
   633  00BD  30FF               	movlw	255
   634  00BE  1683               	bsf	3,5	;RP0=1, select bank1
   635  00BF  1303               	bcf	3,6	;RP1=0, select bank1
   636  00C0  0086               	movwf	6	;volatile
   637  00C1                     l757:
   638                           
   639                           ;main.c: 73:     OPTION_REGbits.nRBPU = 1;
   640  00C1  1781               	bsf	1,7	;volatile
   641  00C2                     l759:
   642                           
   643                           ;main.c: 76:     INTCONbits.RBIF = 0;
   644  00C2  100B               	bcf	11,0	;volatile
   645  00C3                     l761:
   646                           
   647                           ;main.c: 77:     INTCONbits.RBIE = 1;
   648  00C3  158B               	bsf	11,3	;volatile
   649  00C4                     l763:
   650                           
   651                           ;main.c: 78:     OPTION_REGbits.INTEDG = 1;
   652  00C4  1701               	bsf	1,6	;volatile
   653  00C5                     l765:
   654                           
   655                           ;main.c: 79:     INTCONbits.GIE = 1;
   656  00C5  178B               	bsf	11,7	;volatile
   657  00C6                     l767:
   658                           
   659                           ;main.c: 80:     INTCONbits.PEIE = 1;
   660  00C6  170B               	bsf	11,6	;volatile
   661  00C7                     l41:
   662  00C7  0008               	return
   663  00C8                     __end_of_initialize_hw:
   664                           
   665                           	psect	text3
   666  0099                     __ptext3:	
   667 ;; *************** function _interrupt_handler *****************
   668 ;; Defined at:
   669 ;;		line 52 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;		None
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, status,2, status,0, pclath, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   683 ;;      Params:         0       0       0       0
   684 ;;      Locals:         0       0       0       0
   685 ;;      Temps:          2       0       0       0
   686 ;;      Totals:         2       0       0       0
   687 ;;Total ram usage:        2 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    1
   690 ;; This function calls:
   691 ;;		i1_switch_state
   692 ;; This function is called by:
   693 ;;		Interrupt level 1
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           
   698                           ;psect for function _interrupt_handler
   699  0099                     _interrupt_handler:
   700  0099                     i1l775:
   701                           
   702                           ;main.c: 53:     if (INTCONbits.RBIF) {
   703  0099  1C0B               	btfss	11,0	;volatile
   704  009A  289C               	goto	u9_21
   705  009B  289D               	goto	u9_20
   706  009C                     u9_21:
   707  009C  28AB               	goto	i1l38
   708  009D                     u9_20:
   709  009D                     i1l777:
   710                           
   711                           ;main.c: 55:         if (PORTBbits.RB5 && state == IDLE) {
   712  009D  1283               	bcf	3,5	;RP0=0, select bank0
   713  009E  1303               	bcf	3,6	;RP1=0, select bank0
   714  009F  1E86               	btfss	6,5	;volatile
   715  00A0  28A2               	goto	u10_21
   716  00A1  28A3               	goto	u10_20
   717  00A2                     u10_21:
   718  00A2  28AA               	goto	i1l783
   719  00A3                     u10_20:
   720  00A3                     i1l779:
   721  00A3  082C               	movf	_state,w
   722  00A4  1D03               	btfss	3,2
   723  00A5  28A7               	goto	u11_21
   724  00A6  28A8               	goto	u11_20
   725  00A7                     u11_21:
   726  00A7  28AA               	goto	i1l783
   727  00A8                     u11_20:
   728  00A8                     i1l781:
   729                           
   730                           ;main.c: 56:             switch_state(ANIMATION);
   731  00A8  3001               	movlw	1
   732  00A9  20E1               	fcall	i1_switch_state
   733  00AA                     i1l783:
   734                           
   735                           ;main.c: 59:         INTCONbits.RBIF = 0;
   736  00AA  100B               	bcf	11,0	;volatile
   737  00AB                     i1l38:
   738  00AB  0873               	movf	??_interrupt_handler+1,w
   739  00AC  008A               	movwf	10
   740  00AD  0E72               	swapf	??_interrupt_handler,w
   741  00AE  0083               	movwf	3
   742  00AF  0EFE               	swapf	btemp,f
   743  00B0  0E7E               	swapf	btemp,w
   744  00B1  0009               	retfie
   745  00B2                     __end_of_interrupt_handler:
   746                           
   747                           	psect	intentry
   748  0004                     __pintentry:	
   749                           ;incstack = 0
   750                           ; Regs used in _interrupt_handler: [wreg+status,2+status,0+pclath+cstack]
   751                           
   752  0004                     interrupt_function:
   753  007E                     saved_w	set	btemp
   754  0004  00FE               	movwf	btemp
   755  0005  0E03               	swapf	3,w
   756  0006  00F2               	movwf	??_interrupt_handler
   757  0007  080A               	movf	10,w
   758  0008  00F3               	movwf	??_interrupt_handler+1
   759  0009  2899               	ljmp	_interrupt_handler
   760                           
   761                           	psect	text4
   762  00E1                     __ptext4:	
   763 ;; *************** function i1_switch_state *****************
   764 ;; Defined at:
   765 ;;		line 46 in file "main.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;  new_state       1    wreg     unsigned char 
   768 ;; Auto vars:     Size  Location     Type
   769 ;;  new_state       1    1[COMMON] unsigned char 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		wreg, status,2
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   779 ;;      Params:         0       0       0       0
   780 ;;      Locals:         1       0       0       0
   781 ;;      Temps:          1       0       0       0
   782 ;;      Totals:         2       0       0       0
   783 ;;Total ram usage:        2 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_interrupt_handler
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           
   793                           ;psect for function i1_switch_state
   794  00E1                     i1_switch_state:
   795                           
   796                           ;incstack = 0
   797                           ; Regs used in i1_switch_state: [wreg+status,2]
   798                           ;i1switch_state@new_state stored from wreg
   799  00E1  00F1               	movwf	i1switch_state@new_state
   800  00E2                     i1l769:
   801                           
   802                           ;main.c: 47:     state = new_state;
   803  00E2  0871               	movf	i1switch_state@new_state,w
   804  00E3  00F0               	movwf	??i1_switch_state
   805  00E4  0870               	movf	??i1_switch_state,w
   806  00E5  1283               	bcf	3,5	;RP0=0, select bank0
   807  00E6  1303               	bcf	3,6	;RP1=0, select bank0
   808  00E7  00AC               	movwf	_state
   809  00E8                     i1l771:
   810                           
   811                           ;main.c: 48:     loop_count = 0;
   812  00E8  01B4               	clrf	_loop_count
   813  00E9  01B5               	clrf	_loop_count+1
   814  00EA                     i1l773:
   815                           
   816                           ;main.c: 49:     sequence_count = 0;
   817  00EA  01B2               	clrf	_sequence_count
   818  00EB  01B3               	clrf	_sequence_count+1
   819  00EC                     i1l31:
   820  00EC  0008               	return
   821  00ED                     __end_ofi1_switch_state:
   822  007E                     btemp	set	126	;btemp
   823  007E                     wtemp0	set	126
   824                           
   825                           	psect	config
   826                           
   827                           ;Config register CONFIG @ 0x2007
   828                           ;	Oscillator Selection bits
   829                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
   830                           ;	Watchdog Timer Enable bit
   831                           ;	WDTE = OFF, WDT disabled
   832                           ;	Power-up Timer Enable bit
   833                           ;	PWRTE = OFF, PWRT disabled
   834                           ;	RA5/MCLR/VPP Pin Function Select bit
   835                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
   836                           ;	Brown-out Detect Enable bit
   837                           ;	BOREN = OFF, BOD disabled
   838                           ;	Low-Voltage Programming Enable bit
   839                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   840                           ;	Data EE Memory Code Protection bit
   841                           ;	CPD = OFF, Data memory code protection off
   842                           ;	Flash Program Memory Code Protection bit
   843                           ;	CP = OFF, Code protection off
   844  2007                     	org	8199
   845  2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        15
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      5      22
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_switch_state

Critical Paths under _interrupt_handler in COMMON

    _interrupt_handler->i1_switch_state

Critical Paths under _main in BANK0

    None.

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0      56
                                              0 BANK0      5     5      0
                      _initialize_hw
                       _switch_state
 ---------------------------------------------------------------------------------
 (1) _switch_state                                         2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initialize_hw                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _interrupt_handler                                    2     2      0      22
                                              2 COMMON     2     2      0
                     i1_switch_state
 ---------------------------------------------------------------------------------
 (3) i1_switch_state                                       2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize_hw
   _switch_state

 _interrupt_handler (ROOT)
   i1_switch_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      5      16       3       27.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      20      10        0.0%
ABS                  0      0      20       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Oct 06 17:28:59 2021

                        l31 00E0                          l41 00C7                         l741 00D6  
                       l751 00B7                         l743 00DC                         l761 00C3  
                       l753 00BA                         l745 00DE                         l841 005B  
                       l833 0031                         l763 00C4                         l755 00BD  
                       l747 00B2                         l843 005D                         l835 0032  
                       l765 00C5                         l757 00C1                         l749 00B6  
                       l845 0067                         l837 0039                         l853 007F  
                       l767 00C6                         l759 00C2                         l855 008F  
                       l847 006A                         l839 0055                         l881 0087  
                       l849 0070                         u200 0070                         u201 006F  
                       u215 0073                         u180 0055                         u181 0054  
                       u190 0067                         u191 0066                         u175 003C  
                       u185 0051                         u195 0063     __size_ofi1_switch_state 000C  
                       fsr0 0004                         indf 0000                        i1l31 00EC  
                      i1l38 00AB                        u9_20 009D                        u9_21 009C  
                      _main 0031                        btemp 007E                        start 000A  
                     ?_main 0070                       _CMCON 001F                       i1l771 00E8  
                     i1l773 00EA                       i1l781 00A8                       i1l783 00AA  
                     i1l775 0099                       i1l769 00E2                       i1l777 009D  
                     i1l779 00A3                       u10_20 00A3                       u10_21 00A2  
                     u11_20 00A8                       u11_21 00A7                       _PORTA 0005  
                     _PORTB 0006                       _TRISA 0085                       _TRISB 0086  
     __size_of_switch_state 000C                       _state 002C                       pclath 000A  
                     status 0003                       wtemp0 007E             __initialization 000B  
              __end_of_main 0099                _switch_state 00D5                      ??_main 002D  
                    _length 0076              i1_switch_state 00E1                __pdataCOMMON 0078  
   i1switch_state@new_state 0071                      saved_w 007E      __size_of_initialize_hw 0016  
   __end_of__initialization 002F              __pcstackCOMMON 0070                __pidataBANK0 00C8  
    __end_ofi1_switch_state 00ED              _OPTION_REGbits 0081         main@sequence_length 0030  
                __pbssBANK0 0032                  __pmaintext 0031               _initialize_hw 00B2  
                __pintentry 0004             ?i1_switch_state 0070       switch_state@new_state 0075  
            ?_initialize_hw 0070                     __ptext1 00D5                     __ptext2 00B2  
                   __ptext3 0099                     __ptext4 00E1        end_of_initialization 002F  
                _loop_count 0034                   _PORTBbits 0006                _fog_prime_ms 0078  
           ??_initialize_hw 0074               __pidataCOMMON 00ED         start_initialization 000B  
          ??i1_switch_state 0070                 __pdataBANK0 0020                 __pbssCOMMON 0076  
                 ___latbits 0000               __pcstackBANK0 002D               ?_switch_state 0070  
         _interrupt_handler 0099              _sequence_count 0032          ?_interrupt_handler 0070  
       ??_interrupt_handler 0072           interrupt_function 0004              ??_switch_state 0074  
 __end_of_interrupt_handler 00B2               __size_of_main 0068       __end_of_initialize_hw 00C8  
                  _sequence 0020  __size_of_interrupt_handler 0019                  _INTCONbits 000B  
                  intlevel1 0000        __end_of_switch_state 00E1  
