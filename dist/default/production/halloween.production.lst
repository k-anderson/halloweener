

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Oct 14 15:04:37 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F627A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F627A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  008C                     	;# 
    87  008E                     	;# 
    88  0092                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009F                     	;# 
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000E                     	;# 
   107  000E                     	;# 
   108  000F                     	;# 
   109  0010                     	;# 
   110  0011                     	;# 
   111  0012                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001F                     	;# 
   120  0081                     	;# 
   121  0085                     	;# 
   122  0086                     	;# 
   123  008C                     	;# 
   124  008E                     	;# 
   125  0092                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009F                     	;# 
   133                           
   134                           	psect	idataBANK0
   135  013E                     __pidataBANK0:
   136                           
   137                           ;initializer for _sequence_3
   138  013E  34CD               	retlw	205
   139  013F  3400               	retlw	0
   140  0140  3444               	retlw	68
   141  0141  3400               	retlw	0
   142  0142  34A5               	retlw	165
   143  0143  3400               	retlw	0
   144  0144  3440               	retlw	64
   145  0145  3400               	retlw	0
   146  0146  341E               	retlw	30
   147  0147  3400               	retlw	0
   148  0148  3444               	retlw	68
   149  0149  3400               	retlw	0
   150  014A  340A               	retlw	10
   151  014B  3400               	retlw	0
   152  014C  3440               	retlw	64
   153  014D  3400               	retlw	0
   154  014E  3414               	retlw	20
   155  014F  3400               	retlw	0
   156  0150  3454               	retlw	84
   157  0151  3400               	retlw	0
   158  0152  340A               	retlw	10
   159  0153  3400               	retlw	0
   160  0154  3450               	retlw	80
   161  0155  3400               	retlw	0
   162  0156  340F               	retlw	15
   163  0157  3400               	retlw	0
   164  0158  3454               	retlw	84
   165  0159  3400               	retlw	0
   166  015A  340A               	retlw	10
   167  015B  3400               	retlw	0
   168  015C  3450               	retlw	80
   169  015D  3400               	retlw	0
   170  015E  341E               	retlw	30
   171  015F  3400               	retlw	0
   172  0160  3454               	retlw	84
   173  0161  3400               	retlw	0
   174  0162  340A               	retlw	10
   175  0163  3400               	retlw	0
   176  0164  3450               	retlw	80
   177  0165  3400               	retlw	0
   178  0166  340A               	retlw	10
   179  0167  3400               	retlw	0
   180  0168  3454               	retlw	84
   181  0169  3400               	retlw	0
   182  016A  340A               	retlw	10
   183  016B  3400               	retlw	0
   184  016C  3450               	retlw	80
   185  016D  3400               	retlw	0
   186  016E  340A               	retlw	10
   187  016F  3400               	retlw	0
   188  0170  3454               	retlw	84
   189  0171  3400               	retlw	0
   190  0172  340A               	retlw	10
   191  0173  3400               	retlw	0
   192  0174  3450               	retlw	80
   193  0175  3400               	retlw	0
   194  0176  340A               	retlw	10
   195  0177  3400               	retlw	0
   196  0178  3454               	retlw	84
   197  0179  3400               	retlw	0
   198  017A  340A               	retlw	10
   199  017B  3400               	retlw	0
   200  017C  3450               	retlw	80
   201  017D  3400               	retlw	0
   202  017E  341E               	retlw	30
   203  017F  3400               	retlw	0
   204  0180  3454               	retlw	84
   205  0181  3400               	retlw	0
   206  0182  34FF               	retlw	255
   207  0183  3400               	retlw	0
   208  0184  3414               	retlw	20
   209  0185  3400               	retlw	0
   210  0186  34FF               	retlw	255
   211  0187  3400               	retlw	0
   212  0188  3410               	retlw	16
   213  0189  3400               	retlw	0
   214                           
   215                           	psect	idataBANK1
   216  018A                     __pidataBANK1:
   217                           
   218                           ;initializer for _sequence_2
   219  018A  34DC               	retlw	220
   220  018B  3400               	retlw	0
   221  018C  3410               	retlw	16
   222  018D  3400               	retlw	0
   223  018E  3414               	retlw	20
   224  018F  3400               	retlw	0
   225  0190  3404               	retlw	4
   226  0191  3400               	retlw	0
   227  0192  340A               	retlw	10
   228  0193  3400               	retlw	0
   229  0194  3400               	retlw	0
   230  0195  3400               	retlw	0
   231  0196  340A               	retlw	10
   232  0197  3400               	retlw	0
   233  0198  3404               	retlw	4
   234  0199  3400               	retlw	0
   235  019A  340A               	retlw	10
   236  019B  3400               	retlw	0
   237  019C  3400               	retlw	0
   238  019D  3400               	retlw	0
   239  019E  3414               	retlw	20
   240  019F  3400               	retlw	0
   241  01A0  3404               	retlw	4
   242  01A1  3400               	retlw	0
   243  01A2  340A               	retlw	10
   244  01A3  3400               	retlw	0
   245  01A4  3400               	retlw	0
   246  01A5  3400               	retlw	0
   247  01A6  341E               	retlw	30
   248  01A7  3400               	retlw	0
   249  01A8  3404               	retlw	4
   250  01A9  3400               	retlw	0
   251  01AA  3446               	retlw	70
   252  01AB  3400               	retlw	0
   253  01AC  3444               	retlw	68
   254  01AD  3400               	retlw	0
   255  01AE  340B               	retlw	11
   256  01AF  3400               	retlw	0
   257  01B0  3440               	retlw	64
   258  01B1  3400               	retlw	0
   259  01B2  3414               	retlw	20
   260  01B3  3400               	retlw	0
   261  01B4  3444               	retlw	68
   262  01B5  3400               	retlw	0
   263  01B6  340A               	retlw	10
   264  01B7  3400               	retlw	0
   265  01B8  3440               	retlw	64
   266  01B9  3400               	retlw	0
   267  01BA  3446               	retlw	70
   268  01BB  3400               	retlw	0
   269  01BC  3444               	retlw	68
   270  01BD  3400               	retlw	0
   271                           
   272                           	psect	idataBANK2
   273  01BE                     __pidataBANK2:
   274                           
   275                           ;initializer for _sequence_1
   276  01BE  340B               	retlw	11
   277  01BF  3400               	retlw	0
   278  01C0  3482               	retlw	130
   279  01C1  3400               	retlw	0
   280  01C2  34FF               	retlw	255
   281  01C3  3400               	retlw	0
   282  01C4  3403               	retlw	3
   283  01C5  3400               	retlw	0
   284  01C6  34FF               	retlw	255
   285  01C7  3400               	retlw	0
   286  01C8  3403               	retlw	3
   287  01C9  3400               	retlw	0
   288  01CA  34D2               	retlw	210
   289  01CB  3400               	retlw	0
   290  01CC  3403               	retlw	3
   291  01CD  3400               	retlw	0
   292  01CE  3432               	retlw	50
   293  01CF  3400               	retlw	0
   294  01D0  3406               	retlw	6
   295  01D1  3400               	retlw	0
   296  01D2  340A               	retlw	10
   297  01D3  3400               	retlw	0
   298  01D4  3402               	retlw	2
   299  01D5  3400               	retlw	0
   300  01D6  3414               	retlw	20
   301  01D7  3400               	retlw	0
   302  01D8  3406               	retlw	6
   303  01D9  3400               	retlw	0
   304  01DA  340A               	retlw	10
   305  01DB  3400               	retlw	0
   306  01DC  3410               	retlw	16
   307  01DD  3400               	retlw	0
   308  01DE  340A               	retlw	10
   309  01DF  3400               	retlw	0
   310  01E0  3414               	retlw	20
   311  01E1  3400               	retlw	0
   312  01E2  340F               	retlw	15
   313  01E3  3400               	retlw	0
   314  01E4  3410               	retlw	16
   315  01E5  3400               	retlw	0
   316  01E6  347D               	retlw	125
   317  01E7  3400               	retlw	0
   318  01E8  3414               	retlw	20
   319  01E9  3400               	retlw	0
   320  0006                     _PORTB	set	6
   321  0005                     _PORTA	set	5
   322  001F                     _CMCON	set	31
   323  0006                     _PORTBbits	set	6
   324  000B                     _INTCONbits	set	11
   325  0081                     _OPTION_REGbits	set	129
   326  0086                     _TRISB	set	134
   327  0085                     _TRISA	set	133
   328                           
   329                           	psect	cinit
   330  000B                     start_initialization:	
   331                           ; #config settings
   332                           
   333  000B                     __initialization:
   334                           
   335                           ; Initialize objects allocated to BANK2
   336  000B  1783               	bsf	3,7	;select IRP bank2
   337  000C  304C               	movlw	low (__pdataBANK2+44)
   338  000D  00FD               	movwf	btemp+-1
   339  000E  3001               	movlw	high __pidataBANK2
   340  000F  00FE               	movwf	btemp
   341  0010  30BE               	movlw	low __pidataBANK2
   342  0011  00FF               	movwf	btemp+1
   343  0012  3020               	movlw	low __pdataBANK2
   344  0013  0084               	movwf	4
   345  0014  221E               	fcall	init_ram0
   346                           
   347                           ; Initialize objects allocated to BANK1
   348  0015  1383               	bcf	3,7	;select IRP bank0
   349  0016  30D4               	movlw	low (__pdataBANK1+52)
   350  0017  00FD               	movwf	btemp+-1
   351  0018  3001               	movlw	high __pidataBANK1
   352  0019  00FE               	movwf	btemp
   353  001A  308A               	movlw	low __pidataBANK1
   354  001B  00FF               	movwf	btemp+1
   355  001C  30A0               	movlw	low __pdataBANK1
   356  001D  0084               	movwf	4
   357  001E  221E               	fcall	init_ram0
   358                           
   359                           ; Initialize objects allocated to BANK0
   360  001F  306C               	movlw	low (__pdataBANK0+76)
   361  0020  00FD               	movwf	btemp+-1
   362  0021  3001               	movlw	high __pidataBANK0
   363  0022  00FE               	movwf	btemp
   364  0023  303E               	movlw	low __pidataBANK0
   365  0024  00FF               	movwf	btemp+1
   366  0025  3020               	movlw	low __pdataBANK0
   367  0026  0084               	movwf	4
   368  0027  221E               	fcall	init_ram0
   369                           
   370                           ; Clear objects allocated to BANK0
   371  0028  01EC               	clrf	__pbssBANK0& (0+127)
   372  0029  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   373                           
   374                           ; Clear objects allocated to COMMON
   375  002A  01F6               	clrf	__pbssCOMMON& (0+127)
   376  002B  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   377  002C  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   378  002D                     end_of_initialization:	
   379                           ;End of C runtime variable initialization code
   380                           
   381  002D                     __end_of__initialization:
   382  002D  0183               	clrf	3
   383  002E  282F               	ljmp	_main	;jump to C main() function
   384                           
   385                           	psect	bssCOMMON
   386  0076                     __pbssCOMMON:
   387  0076                     _sequence_count:
   388  0076                     	ds	2
   389  0078                     _state:
   390  0078                     	ds	1
   391                           
   392                           	psect	bssBANK0
   393  006C                     __pbssBANK0:
   394  006C                     _loop_count:
   395  006C                     	ds	2
   396                           
   397                           	psect	dataBANK0
   398  0020                     __pdataBANK0:
   399  0020                     _sequence_3:
   400  0020                     	ds	76
   401                           
   402                           	psect	dataBANK1
   403  00A0                     __pdataBANK1:
   404  00A0                     _sequence_2:
   405  00A0                     	ds	52
   406                           
   407                           	psect	dataBANK2
   408  0120                     __pdataBANK2:
   409  0120                     _sequence_1:
   410  0120                     	ds	44
   411                           
   412                           	psect	inittext
   413  021A                     init_fetch0:	
   414                           ;	Called with low address in FSR and high address in W
   415                           
   416  021A  087E               	movf	btemp,w
   417  021B  008A               	movwf	10
   418  021C  087F               	movf	btemp+1,w
   419  021D  0082               	movwf	2
   420  021E                     init_ram0:	
   421                           ;Called with:
   422                           ;	high address of idata address in btemp 
   423                           ;	low address of idata address in btemp+1 
   424                           ;	low address of data in FSR
   425                           ;	high address + 1 of data in btemp-1
   426                           
   427  021E  221A               	fcall	init_fetch0
   428  021F  0080               	movwf	0
   429  0220  0A84               	incf	4,f
   430  0221  0804               	movf	4,w
   431  0222  067D               	xorwf	btemp+-1,w
   432  0223  1903               	btfsc	3,2
   433  0224  3400               	retlw	0
   434  0225  0AFF               	incf	btemp+1,f
   435  0226  1903               	btfsc	3,2
   436  0227  0AFE               	incf	btemp,f
   437  0228  2A1E               	goto	init_ram0
   438                           
   439                           	psect	cstackBANK1
   440  00D4                     __pcstackBANK1:
   441  00D4                     ??_main:
   442                           
   443                           ; 1 bytes @ 0x0
   444  00D4                     	ds	3
   445                           
   446                           	psect	cstackCOMMON
   447  0070                     __pcstackCOMMON:
   448  0070                     ?_switch_state:
   449  0070                     ?_interrupt_handler:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_initialize_hw:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_main:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?i1_switch_state:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ??i1_switch_state:	
   462                           ; 1 bytes @ 0x0
   463                           
   464                           
   465                           ; 1 bytes @ 0x0
   466  0070                     	ds	1
   467  0071                     i1switch_state@new_state:
   468                           
   469                           ; 1 bytes @ 0x1
   470  0071                     	ds	1
   471  0072                     ??_interrupt_handler:
   472                           
   473                           ; 1 bytes @ 0x2
   474  0072                     	ds	2
   475  0074                     ??_switch_state:
   476  0074                     ??_initialize_hw:	
   477                           ; 1 bytes @ 0x4
   478                           
   479                           
   480                           ; 1 bytes @ 0x4
   481  0074                     	ds	1
   482  0075                     switch_state@new_state:
   483                           
   484                           ; 1 bytes @ 0x5
   485  0075                     	ds	1
   486                           
   487                           	psect	maintext
   488  002F                     __pmaintext:	
   489 ;;
   490 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   491 ;;
   492 ;; *************** function _main *****************
   493 ;; Defined at:
   494 ;;		line 139 in file "main.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;  sequence_len    2    0        int 
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : B00/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   508 ;;      Params:         0       0       0       0
   509 ;;      Locals:         0       2       0       0
   510 ;;      Temps:          0       0       3       0
   511 ;;      Totals:         0       2       3       0
   512 ;;Total ram usage:        5 bytes
   513 ;; Hardware stack levels required when called:    3
   514 ;; This function calls:
   515 ;;		_initialize_hw
   516 ;;		_switch_state
   517 ;; This function is called by:
   518 ;;		Startup code after reset
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           
   523                           ;psect for function _main
   524  002F                     _main:
   525  002F                     l894:	
   526                           ;incstack = 0
   527                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   528                           
   529                           
   530                           ;main.c: 140:     initialize_hw();
   531  002F  2203               	fcall	_initialize_hw
   532  0030                     l896:
   533  0030  2911               	goto	l944
   534  0031                     l898:
   535                           
   536                           ;main.c: 148:                 PORTA =~ 0x02;
   537  0031  30FD               	movlw	253
   538  0032  1283               	bcf	3,5	;RP0=0, select bank0
   539  0033  1303               	bcf	3,6	;RP1=0, select bank0
   540  0034  0085               	movwf	5	;volatile
   541                           
   542                           ;main.c: 149:                 break;
   543  0035  2929               	goto	l946
   544  0036                     l900:
   545  0036                     l902:
   546                           
   547                           ;main.c: 156:                 if (loop_count >= sequence_1[sequence_count][0]) {
   548  0036  0876               	movf	_sequence_count,w
   549  0037  00D4               	movwf	??_main^(0+128)
   550  0038  3001               	movlw	1
   551  0039                     u315:
   552  0039  1003               	clrc
   553  003A  0DD4               	rlf	??_main^(0+128),f
   554  003B  3EFF               	addlw	-1
   555  003C  1D03               	skipz
   556  003D  2839               	goto	u315
   557  003E  1003               	clrc
   558  003F  0D54               	rlf	??_main^(0+128),w
   559  0040  3E20               	addlw	(low (_sequence_1| (0+256)))& (0+255)
   560  0041  0084               	movwf	4
   561  0042  1783               	bsf	3,7	;select IRP bank2
   562  0043  0800               	movf	0,w
   563  0044  00D5               	movwf	(??_main+1)^(0+128)
   564  0045  0A84               	incf	4,f
   565  0046  0800               	movf	0,w
   566  0047  00D6               	movwf	((??_main+1)^(0+128)+1)
   567  0048  0856               	movf	(??_main+2)^(0+128),w
   568  0049  1283               	bcf	3,5	;RP0=0, select bank0
   569  004A  1303               	bcf	3,6	;RP1=0, select bank0
   570  004B  026D               	subwf	_loop_count+1,w
   571  004C  1D03               	skipz
   572  004D  2854               	goto	u325
   573  004E  1683               	bsf	3,5	;RP0=1, select bank1
   574  004F  1303               	bcf	3,6	;RP1=0, select bank1
   575  0050  0855               	movf	(??_main+1)^(0+128),w
   576  0051  1283               	bcf	3,5	;RP0=0, select bank0
   577  0052  1303               	bcf	3,6	;RP1=0, select bank0
   578  0053  026C               	subwf	_loop_count,w
   579  0054                     u325:
   580  0054  1C03               	skipc
   581  0055  2857               	goto	u321
   582  0056  2858               	goto	u320
   583  0057                     u321:
   584  0057  2860               	goto	l908
   585  0058                     u320:
   586  0058                     l904:
   587                           
   588                           ;main.c: 157:                     sequence_count++;
   589  0058  3001               	movlw	1
   590  0059  07F6               	addwf	_sequence_count,f
   591  005A  1803               	skipnc
   592  005B  0AF7               	incf	_sequence_count+1,f
   593  005C  3000               	movlw	0
   594  005D  07F7               	addwf	_sequence_count+1,f
   595  005E                     l906:
   596                           
   597                           ;main.c: 158:                     loop_count = 0;
   598  005E  01EC               	clrf	_loop_count
   599  005F  01ED               	clrf	_loop_count+1
   600  0060                     l908:
   601                           
   602                           ;main.c: 163:                 if (sequence_count >= sequence_length) {
   603  0060  3000               	movlw	0
   604  0061  0277               	subwf	_sequence_count+1,w
   605  0062  300B               	movlw	11
   606  0063  1903               	skipnz
   607  0064  0276               	subwf	_sequence_count,w
   608  0065  1C03               	skipc
   609  0066  2868               	goto	u331
   610  0067  2869               	goto	u330
   611  0068                     u331:
   612  0068  286C               	goto	l912
   613  0069                     u330:
   614  0069                     l910:
   615                           
   616                           ;main.c: 164:                     switch_state(ANIMATION_2);
   617  0069  3002               	movlw	2
   618  006A  2229               	fcall	_switch_state
   619                           
   620                           ;main.c: 167:                 } else {
   621  006B  2929               	goto	l946
   622  006C                     l912:
   623                           
   624                           ;main.c: 168:                     PORTA =~ sequence_1[sequence_count][1];
   625  006C  0876               	movf	_sequence_count,w
   626  006D  1683               	bsf	3,5	;RP0=1, select bank1
   627  006E  1303               	bcf	3,6	;RP1=0, select bank1
   628  006F  00D4               	movwf	??_main^(0+128)
   629  0070  3001               	movlw	1
   630  0071                     u345:
   631  0071  1003               	clrc
   632  0072  0DD4               	rlf	??_main^(0+128),f
   633  0073  3EFF               	addlw	-1
   634  0074  1D03               	skipz
   635  0075  2871               	goto	u345
   636  0076  1003               	clrc
   637  0077  0D54               	rlf	??_main^(0+128),w
   638  0078  3E22               	addlw	(low ((_sequence_1| (0+256)+2)))& (0+255)
   639  0079  0084               	movwf	4
   640  007A  0900               	comf	0,w
   641  007B  1283               	bcf	3,5	;RP0=0, select bank0
   642  007C  1303               	bcf	3,6	;RP1=0, select bank0
   643  007D  0085               	movwf	5	;volatile
   644  007E  2929               	goto	l946
   645  007F                     l914:
   646  007F                     l916:
   647                           
   648                           ;main.c: 178:                 if (loop_count >= sequence_2[sequence_count][0]) {
   649  007F  0876               	movf	_sequence_count,w
   650  0080  00D4               	movwf	??_main^(0+128)
   651  0081  3001               	movlw	1
   652  0082                     u355:
   653  0082  1003               	clrc
   654  0083  0DD4               	rlf	??_main^(0+128),f
   655  0084  3EFF               	addlw	-1
   656  0085  1D03               	skipz
   657  0086  2882               	goto	u355
   658  0087  1003               	clrc
   659  0088  0D54               	rlf	??_main^(0+128),w
   660  0089  3EA0               	addlw	(low (_sequence_2| 0))& (0+255)
   661  008A  0084               	movwf	4
   662  008B  1383               	bcf	3,7	;select IRP bank1
   663  008C  0800               	movf	0,w
   664  008D  00D5               	movwf	(??_main+1)^(0+128)
   665  008E  0A84               	incf	4,f
   666  008F  0800               	movf	0,w
   667  0090  00D6               	movwf	((??_main+1)^(0+128)+1)
   668  0091  0856               	movf	(??_main+2)^(0+128),w
   669  0092  1283               	bcf	3,5	;RP0=0, select bank0
   670  0093  1303               	bcf	3,6	;RP1=0, select bank0
   671  0094  026D               	subwf	_loop_count+1,w
   672  0095  1D03               	skipz
   673  0096  289D               	goto	u365
   674  0097  1683               	bsf	3,5	;RP0=1, select bank1
   675  0098  1303               	bcf	3,6	;RP1=0, select bank1
   676  0099  0855               	movf	(??_main+1)^(0+128),w
   677  009A  1283               	bcf	3,5	;RP0=0, select bank0
   678  009B  1303               	bcf	3,6	;RP1=0, select bank0
   679  009C  026C               	subwf	_loop_count,w
   680  009D                     u365:
   681  009D  1C03               	skipc
   682  009E  28A0               	goto	u361
   683  009F  28A1               	goto	u360
   684  00A0                     u361:
   685  00A0  28A9               	goto	l922
   686  00A1                     u360:
   687  00A1                     l918:
   688                           
   689                           ;main.c: 179:                     sequence_count++;
   690  00A1  3001               	movlw	1
   691  00A2  07F6               	addwf	_sequence_count,f
   692  00A3  1803               	skipnc
   693  00A4  0AF7               	incf	_sequence_count+1,f
   694  00A5  3000               	movlw	0
   695  00A6  07F7               	addwf	_sequence_count+1,f
   696  00A7                     l920:
   697                           
   698                           ;main.c: 180:                     loop_count = 0;
   699  00A7  01EC               	clrf	_loop_count
   700  00A8  01ED               	clrf	_loop_count+1
   701  00A9                     l922:
   702                           
   703                           ;main.c: 185:                 if (sequence_count >= sequence_length) {
   704  00A9  3000               	movlw	0
   705  00AA  0277               	subwf	_sequence_count+1,w
   706  00AB  300D               	movlw	13
   707  00AC  1903               	skipnz
   708  00AD  0276               	subwf	_sequence_count,w
   709  00AE  1C03               	skipc
   710  00AF  28B1               	goto	u371
   711  00B0  28B2               	goto	u370
   712  00B1                     u371:
   713  00B1  28B5               	goto	l926
   714  00B2                     u370:
   715  00B2                     l924:
   716                           
   717                           ;main.c: 186:                     switch_state(ANIMATION_3);
   718  00B2  3003               	movlw	3
   719  00B3  2229               	fcall	_switch_state
   720                           
   721                           ;main.c: 189:                 } else {
   722  00B4  2929               	goto	l946
   723  00B5                     l926:
   724                           
   725                           ;main.c: 190:                     PORTA =~ sequence_2[sequence_count][1];
   726  00B5  0876               	movf	_sequence_count,w
   727  00B6  1683               	bsf	3,5	;RP0=1, select bank1
   728  00B7  1303               	bcf	3,6	;RP1=0, select bank1
   729  00B8  00D4               	movwf	??_main^(0+128)
   730  00B9  3001               	movlw	1
   731  00BA                     u385:
   732  00BA  1003               	clrc
   733  00BB  0DD4               	rlf	??_main^(0+128),f
   734  00BC  3EFF               	addlw	-1
   735  00BD  1D03               	skipz
   736  00BE  28BA               	goto	u385
   737  00BF  1003               	clrc
   738  00C0  0D54               	rlf	??_main^(0+128),w
   739  00C1  3EA2               	addlw	(low ((_sequence_2| 0+2)))& (0+255)
   740  00C2  0084               	movwf	4
   741  00C3  0900               	comf	0,w
   742  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   743  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   744  00C6  0085               	movwf	5	;volatile
   745  00C7  2929               	goto	l946
   746  00C8                     l928:
   747  00C8                     l930:
   748                           
   749                           ;main.c: 200:                 if (loop_count >= sequence_3[sequence_count][0]) {
   750  00C8  0876               	movf	_sequence_count,w
   751  00C9  00D4               	movwf	??_main^(0+128)
   752  00CA  3001               	movlw	1
   753  00CB                     u395:
   754  00CB  1003               	clrc
   755  00CC  0DD4               	rlf	??_main^(0+128),f
   756  00CD  3EFF               	addlw	-1
   757  00CE  1D03               	skipz
   758  00CF  28CB               	goto	u395
   759  00D0  1003               	clrc
   760  00D1  0D54               	rlf	??_main^(0+128),w
   761  00D2  3E20               	addlw	(low (_sequence_3| 0))& (0+255)
   762  00D3  0084               	movwf	4
   763  00D4  1383               	bcf	3,7	;select IRP bank0
   764  00D5  0800               	movf	0,w
   765  00D6  00D5               	movwf	(??_main+1)^(0+128)
   766  00D7  0A84               	incf	4,f
   767  00D8  0800               	movf	0,w
   768  00D9  00D6               	movwf	((??_main+1)^(0+128)+1)
   769  00DA  0856               	movf	(??_main+2)^(0+128),w
   770  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   771  00DC  1303               	bcf	3,6	;RP1=0, select bank0
   772  00DD  026D               	subwf	_loop_count+1,w
   773  00DE  1D03               	skipz
   774  00DF  28E6               	goto	u405
   775  00E0  1683               	bsf	3,5	;RP0=1, select bank1
   776  00E1  1303               	bcf	3,6	;RP1=0, select bank1
   777  00E2  0855               	movf	(??_main+1)^(0+128),w
   778  00E3  1283               	bcf	3,5	;RP0=0, select bank0
   779  00E4  1303               	bcf	3,6	;RP1=0, select bank0
   780  00E5  026C               	subwf	_loop_count,w
   781  00E6                     u405:
   782  00E6  1C03               	skipc
   783  00E7  28E9               	goto	u401
   784  00E8  28EA               	goto	u400
   785  00E9                     u401:
   786  00E9  28F2               	goto	l936
   787  00EA                     u400:
   788  00EA                     l932:
   789                           
   790                           ;main.c: 201:                     sequence_count++;
   791  00EA  3001               	movlw	1
   792  00EB  07F6               	addwf	_sequence_count,f
   793  00EC  1803               	skipnc
   794  00ED  0AF7               	incf	_sequence_count+1,f
   795  00EE  3000               	movlw	0
   796  00EF  07F7               	addwf	_sequence_count+1,f
   797  00F0                     l934:
   798                           
   799                           ;main.c: 202:                     loop_count = 0;
   800  00F0  01EC               	clrf	_loop_count
   801  00F1  01ED               	clrf	_loop_count+1
   802  00F2                     l936:
   803                           
   804                           ;main.c: 207:                 if (sequence_count >= sequence_length) {
   805  00F2  3000               	movlw	0
   806  00F3  0277               	subwf	_sequence_count+1,w
   807  00F4  3013               	movlw	19
   808  00F5  1903               	skipnz
   809  00F6  0276               	subwf	_sequence_count,w
   810  00F7  1C03               	skipc
   811  00F8  28FA               	goto	u411
   812  00F9  28FB               	goto	u410
   813  00FA                     u411:
   814  00FA  28FE               	goto	l940
   815  00FB                     u410:
   816  00FB                     l938:
   817                           
   818                           ;main.c: 208:                     switch_state(IDLE);
   819  00FB  3000               	movlw	0
   820  00FC  2229               	fcall	_switch_state
   821                           
   822                           ;main.c: 211:                 } else {
   823  00FD  2929               	goto	l946
   824  00FE                     l940:
   825                           
   826                           ;main.c: 212:                     PORTA =~ sequence_3[sequence_count][1];
   827  00FE  0876               	movf	_sequence_count,w
   828  00FF  1683               	bsf	3,5	;RP0=1, select bank1
   829  0100  1303               	bcf	3,6	;RP1=0, select bank1
   830  0101  00D4               	movwf	??_main^(0+128)
   831  0102  3001               	movlw	1
   832  0103                     u425:
   833  0103  1003               	clrc
   834  0104  0DD4               	rlf	??_main^(0+128),f
   835  0105  3EFF               	addlw	-1
   836  0106  1D03               	skipz
   837  0107  2903               	goto	u425
   838  0108  1003               	clrc
   839  0109  0D54               	rlf	??_main^(0+128),w
   840  010A  3E22               	addlw	(low ((_sequence_3| 0+2)))& (0+255)
   841  010B  0084               	movwf	4
   842  010C  0900               	comf	0,w
   843  010D  1283               	bcf	3,5	;RP0=0, select bank0
   844  010E  1303               	bcf	3,6	;RP1=0, select bank0
   845  010F  0085               	movwf	5	;volatile
   846  0110  2929               	goto	l946
   847  0111                     l944:
   848  0111  0878               	movf	_state,w
   849  0112  1683               	bsf	3,5	;RP0=1, select bank1
   850  0113  1303               	bcf	3,6	;RP1=0, select bank1
   851  0114  00D4               	movwf	??_main^(0+128)
   852  0115  01D5               	clrf	(??_main^(0+128)+1)
   853                           
   854                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   855                           ; Switch size 1, requested type "simple"
   856                           ; Number of cases is 1, Range of values is 0 to 0
   857                           ; switch strategies available:
   858                           ; Name         Instructions Cycles
   859                           ; simple_byte            4     3 (average)
   860                           ; direct_byte            7     6 (fixed)
   861                           ; jumptable            260     6 (fixed)
   862                           ;	Chosen strategy is simple_byte
   863  0116  0855               	movf	(??_main+1)^(0+128),w
   864  0117  3A00               	xorlw	0	; case 0
   865  0118  1903               	skipnz
   866  0119  291B               	goto	l984
   867  011A  2929               	goto	l946
   868  011B                     l984:
   869                           
   870                           ; Switch size 1, requested type "simple"
   871                           ; Number of cases is 4, Range of values is 0 to 3
   872                           ; switch strategies available:
   873                           ; Name         Instructions Cycles
   874                           ; direct_byte           10     6 (fixed)
   875                           ; simple_byte           13     7 (average)
   876                           ; jumptable            260     6 (fixed)
   877                           ;	Chosen strategy is simple_byte
   878  011B  0854               	movf	??_main^(0+128),w
   879  011C  3A00               	xorlw	0	; case 0
   880  011D  1903               	skipnz
   881  011E  2831               	goto	l898
   882  011F  3A01               	xorlw	1	; case 1
   883  0120  1903               	skipnz
   884  0121  2836               	goto	l900
   885  0122  3A03               	xorlw	3	; case 2
   886  0123  1903               	skipnz
   887  0124  287F               	goto	l914
   888  0125  3A01               	xorlw	1	; case 3
   889  0126  1903               	skipnz
   890  0127  28C8               	goto	l928
   891  0128  2929               	goto	l946
   892  0129                     l946:
   893                           
   894                           ;main.c: 218:         _delay((unsigned long)((10)*(4000000/4000.0)));
   895  0129  300D               	movlw	13
   896  012A  1683               	bsf	3,5	;RP0=1, select bank1
   897  012B  1303               	bcf	3,6	;RP1=0, select bank1
   898  012C  00D5               	movwf	(??_main^(0+128)+1)
   899  012D  30FB               	movlw	251
   900  012E  00D4               	movwf	??_main^(0+128)
   901  012F                     u437:
   902  012F  0BD4               	decfsz	??_main^(0+128),f
   903  0130  292F               	goto	u437
   904  0131  0BD5               	decfsz	(??_main^(0+128)+1),f
   905  0132  292F               	goto	u437
   906  0133  0000               	nop
   907                           
   908                           ;main.c: 220:         loop_count++;
   909  0134  3001               	movlw	1
   910  0135  1283               	bcf	3,5	;RP0=0, select bank0
   911  0136  1303               	bcf	3,6	;RP1=0, select bank0
   912  0137  07EC               	addwf	_loop_count,f
   913  0138  1803               	skipnc
   914  0139  0AED               	incf	_loop_count+1,f
   915  013A  3000               	movlw	0
   916  013B  07ED               	addwf	_loop_count+1,f
   917  013C  2911               	goto	l944
   918  013D  280A               	ljmp	start
   919  013E                     __end_of_main:
   920                           
   921                           	psect	text1
   922  0229                     __ptext1:	
   923 ;; *************** function _switch_state *****************
   924 ;; Defined at:
   925 ;;		line 102 in file "main.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  new_state       1    wreg     unsigned char 
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  new_state       1    5[COMMON] unsigned char 
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, status,2
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   939 ;;      Params:         0       0       0       0
   940 ;;      Locals:         1       0       0       0
   941 ;;      Temps:          1       0       0       0
   942 ;;      Totals:         2       0       0       0
   943 ;;Total ram usage:        2 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    2
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_main
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           
   954                           ;psect for function _switch_state
   955  0229                     _switch_state:
   956                           
   957                           ;incstack = 0
   958                           ; Regs used in _switch_state: [wreg+status,2]
   959                           ;switch_state@new_state stored from wreg
   960  0229  00F5               	movwf	switch_state@new_state
   961  022A                     l776:
   962                           
   963                           ;main.c: 103:     state = new_state;
   964  022A  0875               	movf	switch_state@new_state,w
   965  022B  00F4               	movwf	??_switch_state
   966  022C  0874               	movf	??_switch_state,w
   967  022D  00F8               	movwf	_state
   968  022E                     l778:
   969                           
   970                           ;main.c: 104:     loop_count = 0;
   971  022E  1283               	bcf	3,5	;RP0=0, select bank0
   972  022F  1303               	bcf	3,6	;RP1=0, select bank0
   973  0230  01EC               	clrf	_loop_count
   974  0231  01ED               	clrf	_loop_count+1
   975  0232                     l780:
   976                           
   977                           ;main.c: 105:     sequence_count = 0;
   978  0232  01F6               	clrf	_sequence_count
   979  0233  01F7               	clrf	_sequence_count+1
   980  0234                     l33:
   981  0234  0008               	return
   982  0235                     __end_of_switch_state:
   983                           
   984                           	psect	text2
   985  0203                     __ptext2:	
   986 ;; *************** function _initialize_hw *****************
   987 ;; Defined at:
   988 ;;		line 119 in file "main.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, status,2
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1002 ;;      Params:         0       0       0       0
  1003 ;;      Locals:         0       0       0       0
  1004 ;;      Temps:          0       0       0       0
  1005 ;;      Totals:         0       0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    2
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           
  1017                           ;psect for function _initialize_hw
  1018  0203                     _initialize_hw:
  1019  0203                     l782:	
  1020                           ;incstack = 0
  1021                           ; Regs used in _initialize_hw: [wreg+status,2]
  1022                           
  1023                           
  1024                           ;main.c: 120:     CMCON = 0x07;
  1025  0203  3007               	movlw	7
  1026  0204  1283               	bcf	3,5	;RP0=0, select bank0
  1027  0205  1303               	bcf	3,6	;RP1=0, select bank0
  1028  0206  009F               	movwf	31	;volatile
  1029                           
  1030                           ;main.c: 123:     PORTA = 0xFF;
  1031  0207  30FF               	movlw	255
  1032  0208  0085               	movwf	5	;volatile
  1033  0209                     l784:
  1034                           
  1035                           ;main.c: 124:     TRISA = 0x00;
  1036  0209  1683               	bsf	3,5	;RP0=1, select bank1
  1037  020A  1303               	bcf	3,6	;RP1=0, select bank1
  1038  020B  0185               	clrf	5	;volatile
  1039  020C                     l786:
  1040                           
  1041                           ;main.c: 127:     PORTB = 0x00;
  1042  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1043  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1044  020E  0186               	clrf	6	;volatile
  1045                           
  1046                           ;main.c: 128:     TRISB = 0xFF;
  1047  020F  30FF               	movlw	255
  1048  0210  1683               	bsf	3,5	;RP0=1, select bank1
  1049  0211  1303               	bcf	3,6	;RP1=0, select bank1
  1050  0212  0086               	movwf	6	;volatile
  1051  0213                     l788:
  1052                           
  1053                           ;main.c: 129:     OPTION_REGbits.nRBPU = 1;
  1054  0213  1781               	bsf	1,7	;volatile
  1055  0214                     l790:
  1056                           
  1057                           ;main.c: 132:     INTCONbits.RBIF = 0;
  1058  0214  100B               	bcf	11,0	;volatile
  1059  0215                     l792:
  1060                           
  1061                           ;main.c: 133:     INTCONbits.RBIE = 1;
  1062  0215  158B               	bsf	11,3	;volatile
  1063  0216                     l794:
  1064                           
  1065                           ;main.c: 134:     OPTION_REGbits.INTEDG = 1;
  1066  0216  1701               	bsf	1,6	;volatile
  1067  0217                     l796:
  1068                           
  1069                           ;main.c: 135:     INTCONbits.GIE = 1;
  1070  0217  178B               	bsf	11,7	;volatile
  1071  0218                     l798:
  1072                           
  1073                           ;main.c: 136:     INTCONbits.PEIE = 1;
  1074  0218  170B               	bsf	11,6	;volatile
  1075  0219                     l43:
  1076  0219  0008               	return
  1077  021A                     __end_of_initialize_hw:
  1078                           
  1079                           	psect	text3
  1080  01EA                     __ptext3:	
  1081 ;; *************** function _interrupt_handler *****************
  1082 ;; Defined at:
  1083 ;;		line 108 in file "main.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2, status,0, pclath, cstack
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1097 ;;      Params:         0       0       0       0
  1098 ;;      Locals:         0       0       0       0
  1099 ;;      Temps:          2       0       0       0
  1100 ;;      Totals:         2       0       0       0
  1101 ;;Total ram usage:        2 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; Hardware stack levels required when called:    1
  1104 ;; This function calls:
  1105 ;;		i1_switch_state
  1106 ;; This function is called by:
  1107 ;;		Interrupt level 1
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           
  1112                           ;psect for function _interrupt_handler
  1113  01EA                     _interrupt_handler:
  1114  01EA                     i1l806:
  1115                           
  1116                           ;main.c: 109:     if (INTCONbits.RBIF) {
  1117  01EA  1C0B               	btfss	11,0	;volatile
  1118  01EB  29ED               	goto	u16_21
  1119  01EC  29EE               	goto	u16_20
  1120  01ED                     u16_21:
  1121  01ED  29FC               	goto	i1l40
  1122  01EE                     u16_20:
  1123  01EE                     i1l808:
  1124                           
  1125                           ;main.c: 111:         if (PORTBbits.RB5 && state == IDLE) {
  1126  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1127  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1128  01F0  1E86               	btfss	6,5	;volatile
  1129  01F1  29F3               	goto	u17_21
  1130  01F2  29F4               	goto	u17_20
  1131  01F3                     u17_21:
  1132  01F3  29FB               	goto	i1l814
  1133  01F4                     u17_20:
  1134  01F4                     i1l810:
  1135  01F4  0878               	movf	_state,w
  1136  01F5  1D03               	btfss	3,2
  1137  01F6  29F8               	goto	u18_21
  1138  01F7  29F9               	goto	u18_20
  1139  01F8                     u18_21:
  1140  01F8  29FB               	goto	i1l814
  1141  01F9                     u18_20:
  1142  01F9                     i1l812:
  1143                           
  1144                           ;main.c: 112:             switch_state(ANIMATION_1);
  1145  01F9  3001               	movlw	1
  1146  01FA  2235               	fcall	i1_switch_state
  1147  01FB                     i1l814:
  1148                           
  1149                           ;main.c: 115:         INTCONbits.RBIF = 0;
  1150  01FB  100B               	bcf	11,0	;volatile
  1151  01FC                     i1l40:
  1152  01FC  0873               	movf	??_interrupt_handler+1,w
  1153  01FD  008A               	movwf	10
  1154  01FE  0E72               	swapf	??_interrupt_handler,w
  1155  01FF  0083               	movwf	3
  1156  0200  0EFE               	swapf	btemp,f
  1157  0201  0E7E               	swapf	btemp,w
  1158  0202  0009               	retfie
  1159  0203                     __end_of_interrupt_handler:
  1160                           
  1161                           	psect	intentry
  1162  0004                     __pintentry:	
  1163                           ;incstack = 0
  1164                           ; Regs used in _interrupt_handler: [wreg+status,2+status,0+pclath+cstack]
  1165                           
  1166  0004                     interrupt_function:
  1167  007E                     saved_w	set	btemp
  1168  0004  00FE               	movwf	btemp
  1169  0005  0E03               	swapf	3,w
  1170  0006  00F2               	movwf	??_interrupt_handler
  1171  0007  080A               	movf	10,w
  1172  0008  00F3               	movwf	??_interrupt_handler+1
  1173  0009  29EA               	ljmp	_interrupt_handler
  1174                           
  1175                           	psect	text4
  1176  0235                     __ptext4:	
  1177 ;; *************** function i1_switch_state *****************
  1178 ;; Defined at:
  1179 ;;		line 102 in file "main.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  new_state       1    wreg     unsigned char 
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  new_state       1    1[COMMON] unsigned char 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1193 ;;      Params:         0       0       0       0
  1194 ;;      Locals:         1       0       0       0
  1195 ;;      Temps:          1       0       0       0
  1196 ;;      Totals:         2       0       0       0
  1197 ;;Total ram usage:        2 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; This function calls:
  1200 ;;		Nothing
  1201 ;; This function is called by:
  1202 ;;		_interrupt_handler
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           
  1207                           ;psect for function i1_switch_state
  1208  0235                     i1_switch_state:
  1209                           
  1210                           ;incstack = 0
  1211                           ; Regs used in i1_switch_state: [wreg+status,2]
  1212                           ;i1switch_state@new_state stored from wreg
  1213  0235  00F1               	movwf	i1switch_state@new_state
  1214  0236                     i1l800:
  1215                           
  1216                           ;main.c: 103:     state = new_state;
  1217  0236  0871               	movf	i1switch_state@new_state,w
  1218  0237  00F0               	movwf	??i1_switch_state
  1219  0238  0870               	movf	??i1_switch_state,w
  1220  0239  00F8               	movwf	_state
  1221  023A                     i1l802:
  1222                           
  1223                           ;main.c: 104:     loop_count = 0;
  1224  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1225  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1226  023C  01EC               	clrf	_loop_count
  1227  023D  01ED               	clrf	_loop_count+1
  1228  023E                     i1l804:
  1229                           
  1230                           ;main.c: 105:     sequence_count = 0;
  1231  023E  01F6               	clrf	_sequence_count
  1232  023F  01F7               	clrf	_sequence_count+1
  1233  0240                     i1l33:
  1234  0240  0008               	return
  1235  0241                     __end_ofi1_switch_state:
  1236  007E                     btemp	set	126	;btemp
  1237  007E                     wtemp0	set	126
  1238                           
  1239                           	psect	config
  1240                           
  1241                           ;Config register CONFIG @ 0x2007
  1242                           ;	Oscillator Selection bits
  1243                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1244                           ;	Watchdog Timer Enable bit
  1245                           ;	WDTE = OFF, WDT disabled
  1246                           ;	Power-up Timer Enable bit
  1247                           ;	PWRTE = OFF, PWRT disabled
  1248                           ;	RA5/MCLR/VPP Pin Function Select bit
  1249                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  1250                           ;	Brown-out Detect Enable bit
  1251                           ;	BOREN = OFF, BOD disabled
  1252                           ;	Low-Voltage Programming Enable bit
  1253                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1254                           ;	Data EE Memory Code Protection bit
  1255                           ;	CPD = OFF, Data memory code protection off
  1256                           ;	Flash Program Memory Code Protection bit
  1257                           ;	CP = OFF, Code protection off
  1258  2007                     	org	8199
  1259  2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        172
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       9
    BANK0            80      2      80
    BANK1            80      3      55
    BANK2            48      0      44

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_switch_state

Critical Paths under _interrupt_handler in COMMON

    _interrupt_handler->i1_switch_state

Critical Paths under _main in BANK0

    None.

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     127
                                              0 BANK0      2     2      0
                                              0 BANK1      3     3      0
                      _initialize_hw
                       _switch_state
 ---------------------------------------------------------------------------------
 (1) _switch_state                                         2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initialize_hw                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _interrupt_handler                                    2     2      0      22
                                              2 COMMON     2     2      0
                     i1_switch_state
 ---------------------------------------------------------------------------------
 (3) i1_switch_state                                       2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize_hw
   _switch_state

 _interrupt_handler (ROOT)
   i1_switch_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0      2C       9       91.7%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      3      37       7       68.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      2      50       3      100.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BC      10        0.0%
ABS                  0      0      BC       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Oct 14 15:04:37 2021

                         pc 0002                          l33 0234                          l43 0219  
                        fsr 0004                         l900 0036                         l910 0069  
                       l902 0036                         l920 00A7                         l912 006C  
                       l904 0058                         l930 00C8                         l922 00A9  
                       l914 007F                         l906 005E                         l780 0232  
                       l940 00FE                         l932 00EA                         l924 00B2  
                       l916 007F                         l908 0060                         l790 0214  
                       l782 0203                         l934 00F0                         l926 00B5  
                       l918 00A1                         l792 0215                         l784 0209  
                       l776 022A                         l936 00F2                         l928 00C8  
                       l944 0111                         l794 0216                         l786 020C  
                       l778 022E                         l938 00FB                         l946 0129  
                       l796 0217                         l788 0213                         l798 0218  
                       l894 002F                         l984 011B                         l896 0030  
                       l898 0031                         u400 00EA                         u320 0058  
                       u401 00E9                         u321 0057                         u410 00FB  
                       u330 0069                         u411 00FA                         u331 0068  
                       u315 0039                         u405 00E6                         u325 0054  
                       u360 00A1                         u425 0103                         u361 00A0  
                       u345 0071                         u370 00B2                         u371 00B1  
                       u355 0082                         u437 012F                         u365 009D  
                       u385 00BA                         u395 00CB     __size_ofi1_switch_state 000C  
                       fsr0 0004                         indf 0000                        i1l40 01FC  
                      i1l33 0240                        _main 002F                        btemp 007E  
                      start 000A                       ?_main 0070                       _CMCON 001F  
                     i1l800 0236                       i1l802 023A                       i1l810 01F4  
                     i1l804 023E                       i1l812 01F9                       i1l814 01FB  
                     i1l806 01EA                       i1l808 01EE                       u16_20 01EE  
                     u16_21 01ED                       u17_20 01F4                       u17_21 01F3  
                     u18_20 01F9                       u18_21 01F8                       _PORTA 0005  
                     _PORTB 0006                       _TRISA 0085                       _TRISB 0086  
     __size_of_switch_state 000C                       _state 0078                       pclath 000A  
                     status 0003                       wtemp0 007E             __initialization 000B  
              __end_of_main 013E                _switch_state 0229                      ??_main 00D4  
            i1_switch_state 0235     i1switch_state@new_state 0071                      saved_w 007E  
    __size_of_initialize_hw 0017     __end_of__initialization 002D              __pcstackCOMMON 0070  
              __pidataBANK0 013E                __pidataBANK1 018A                __pidataBANK2 01BE  
    __end_ofi1_switch_state 0241              _OPTION_REGbits 0081                  __pbssBANK0 006C  
                __pmaintext 002F               _initialize_hw 0203                  __pintentry 0004  
           ?i1_switch_state 0070       switch_state@new_state 0075              ?_initialize_hw 0070  
                   __ptext1 0229                     __ptext2 0203                     __ptext3 01EA  
                   __ptext4 0235        end_of_initialization 002D                  _loop_count 006C  
                _sequence_1 0120                  _sequence_2 00A0                  _sequence_3 0020  
                 _PORTBbits 0006             ??_initialize_hw 0074         start_initialization 000B  
          ??i1_switch_state 0070                  init_fetch0 021A                 __pdataBANK0 0020  
               __pdataBANK1 00A0                 __pdataBANK2 0120                 __pbssCOMMON 0076  
                 ___latbits 0000               __pcstackBANK1 00D4               ?_switch_state 0070  
         _interrupt_handler 01EA              _sequence_count 0076          ?_interrupt_handler 0070  
       ??_interrupt_handler 0072           interrupt_function 0004              ??_switch_state 0074  
 __end_of_interrupt_handler 0203               __size_of_main 010F       __end_of_initialize_hw 021A  
__size_of_interrupt_handler 0019                  _INTCONbits 000B                    init_ram0 021E  
                  intlevel1 0000        __end_of_switch_state 0235  
